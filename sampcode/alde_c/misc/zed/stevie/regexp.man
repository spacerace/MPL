


     RRRREEEEGGGGEEEEXXXXPPPP((((3333))))               UUUUNNNNIIIIXXXX 5555....0000 ((((llllooooccccaaaallll))))                RRRREEEEGGGGEEEEXXXXPPPP((((3333))))



     NNNNAAAAMMMMEEEE
          regcomp, regexec, regsub, regerror - regular expression
          handler

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ####iiiinnnncccclllluuuuddddeeee <<<<rrrreeeeggggeeeexxxxpppp....hhhh>>>>

          rrrreeeeggggeeeexxxxpppp ****rrrreeeeggggccccoooommmmpppp((((eeeexxxxpppp))))
          cccchhhhaaaarrrr ****eeeexxxxpppp;;;;

          iiiinnnntttt rrrreeeeggggeeeexxxxeeeecccc((((pppprrrroooogggg,,,, ssssttttrrrriiiinnnngggg))))
          rrrreeeeggggeeeexxxxpppp ****pppprrrroooogggg;;;;
          cccchhhhaaaarrrr ****ssssttttrrrriiiinnnngggg;;;;

          rrrreeeeggggssssuuuubbbb((((pppprrrroooogggg,,,, ssssoooouuuurrrrcccceeee,,,, ddddeeeesssstttt))))
          rrrreeeeggggeeeexxxxpppp ****pppprrrroooogggg;;;;
          cccchhhhaaaarrrr ****ssssoooouuuurrrrcccceeee;;;;
          cccchhhhaaaarrrr ****ddddeeeesssstttt;;;;

          rrrreeeeggggeeeerrrrrrrroooorrrr((((mmmmssssgggg))))
          cccchhhhaaaarrrr ****mmmmssssgggg;;;;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          These functions implement _e_g_r_e_p(1)-style regular expressions
          and supporting facilities.

          _R_e_g_c_o_m_p compiles a regular expression into a structure of
          type _r_e_g_e_x_p, and returns a pointer to it.  The space has
          been allocated using _m_a_l_l_o_c(3) and may be released by _f_r_e_e.

          _R_e_g_e_x_e_c matches a NUL-terminated _s_t_r_i_n_g against the compiled
          regular expression in _p_r_o_g.  It returns 1 for success and 0
          for failure, and adjusts the contents of _p_r_o_g's _s_t_a_r_t_p and
          _e_n_d_p (see below) accordingly.

          The members of a _r_e_g_e_x_p structure include at least the
          following (not necessarily in order):

               char *startp[NSUBEXP];
               char *endp[NSUBEXP];

          where _N_S_U_B_E_X_P is defined (as 10) in the header file.  Once a
          successful _r_e_g_e_x_e_c has been done using the _r_e_g_e_x_p, each
          _s_t_a_r_t_p-_e_n_d_p pair describes one substring within the _s_t_r_i_n_g,
          with the _s_t_a_r_t_p pointing to the first character of the
          substring and the _e_n_d_p pointing to the first character
          following the substring.  The 0th substring is the substring
          of _s_t_r_i_n_g that matched the whole regular expression.  The
          others are those substrings that matched parenthesized
          expressions within the regular expression, with
          parenthesized expressions numbered in left-to-right order of
          their opening parentheses.



     Page 1                                           (printed 9/2/87)






     RRRREEEEGGGGEEEEXXXXPPPP((((3333))))               UUUUNNNNIIIIXXXX 5555....0000 ((((llllooooccccaaaallll))))                RRRREEEEGGGGEEEEXXXXPPPP((((3333))))



          _R_e_g_s_u_b copies _s_o_u_r_c_e to _d_e_s_t, making substitutions according
          to the most recent _r_e_g_e_x_e_c performed using _p_r_o_g.  Each
          instance of `&' in _s_o_u_r_c_e is replaced by the substring
          indicated by _s_t_a_r_t_p[_0] and _e_n_d_p[_0].  Each instance of `\_n',
          where _n is a digit, is replaced by the substring indicated
          by _s_t_a_r_t_p[_n] and _e_n_d_p[_n].  To get a literal `&' or `\_n' into
          _d_e_s_t, prefix it with `\'; to get a literal `\' preceding `&'
          or `\_n', prefix it with another `\'.

          _R_e_g_e_r_r_o_r is called whenever an error is detected in _r_e_g_c_o_m_p,
          _r_e_g_e_x_e_c, or _r_e_g_s_u_b.  The default _r_e_g_e_r_r_o_r writes the string
          _m_s_g, with a suitable indicator of origin, on the standard
          error output and invokes _e_x_i_t(2).  _R_e_g_e_r_r_o_r can be replaced
          by the user if other actions are desirable.

     RRRREEEEGGGGUUUULLLLAAAARRRR EEEEXXXXPPPPRRRREEEESSSSSSSSIIIIOOOONNNN SSSSYYYYNNNNTTTTAAAAXXXX
          A regular expression is zero or more _b_r_a_n_c_h_e_s, separated by
          `|'.  It matches anything that matches one of the branches.

          A branch is zero or more _p_i_e_c_e_s, concatenated.  It matches a
          match for the first, followed by a match for the second,
          etc.

          A piece is an _a_t_o_m possibly followed by `*', `+', or `?'.
          An atom followed by `*' matches a sequence of 0 or more
          matches of the atom.  An atom followed by `+' matches a
          sequence of 1 or more matches of the atom.  An atom followed
          by `?' matches a match of the atom, or the null string.

          An atom is a regular expression in parentheses (matching a
          match for the regular expression), a _r_a_n_g_e (see below), `.'
          (matching any single character), `^' (matching the null
          string at the beginning of the input string), `$' (matching
          the null string at the end of the input string), a `\'
          followed by a single character (matching that character), or
          a single character with no other significance (matching that
          character).

          A _r_a_n_g_e is a sequence of characters enclosed in `[]'.  It
          normally matches any single character from the sequence.  If
          the sequence begins with `^', it matches any single
          character _n_o_t from the rest of the sequence.  If two
          characters in the sequence are separated by `-', this is
          shorthand for the full list of ASCII characters between them
          (e.g. `[0-9]' matches any decimal digit).  To include a
          literal `]' in the sequence, make it the first character
          (following a possible `^').  To include a literal `-', make
          it the first or last character.

     AAAAMMMMBBBBIIIIGGGGUUUUIIIITTTTYYYY
          If a regular expression could match two different parts of
          the input string, it will match the one which begins



     Page 2                                           (printed 9/2/87)






     RRRREEEEGGGGEEEEXXXXPPPP((((3333))))               UUUUNNNNIIIIXXXX 5555....0000 ((((llllooooccccaaaallll))))                RRRREEEEGGGGEEEEXXXXPPPP((((3333))))



          earliest.  If both begin in the same place    but match
          different lengths, or match the same length in different
          ways, life gets messier, as follows.

          In general, the possibilities in a list of branches are
          considered in left-to-right order, the possibilities for
          `*', `+', and `?' are considered longest-first, nested
          constructs are considered from the outermost in, and
          concatenated constructs are considered leftmost-first.  The
          match that will be chosen is the one that uses the earliest
          possibility in the first choice that has to be made.  If
          there is more than one choice, the next will be made in the
          same manner (earliest possibility) subject to the decision
          on the first choice.  And so forth.

          For example, `(ab|a)b*c' could match `abc' in one of two
          ways.  The first choice is between `ab' and `a'; since `ab'
          is earlier, and does lead to a successful overall match, it
          is chosen.  Since the `b' is already spoken for, the `b*'
          must match its last possibility-the empty string-since it
          must respect the earlier choice.

          In the particular case where no `|'s are present and there
          is only one `*', `+', or `?', the net effect is that the
          longest possible match will be chosen.  So `ab*', presented
          with `xabbbby', will match `abbbb'.  Note that if `ab*' is
          tried against `xabyabbbz', it will match `ab' just after
          `x', due to the begins-earliest rule.  (In effect, the
          decision on where to start the match is the first choice to
          be made, hence subsequent choices must respect it even if
          this leads them to less-preferred alternatives.)

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          egrep(1), expr(1)

     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
          _R_e_g_c_o_m_p returns NULL for a failure (_r_e_g_e_r_r_o_r permitting),
          where failures are syntax errors, exceeding implementation
          limits, or applying `+' or `*' to a possibly-null operand.

     HHHHIIIISSSSTTTTOOOORRRRYYYY
          Both code and manual page were written at U of T.  They are
          intended to be compatible with the Bell V8 _r_e_g_e_x_p(3), but
          are not derived from Bell code.

     BBBBUUUUGGGGSSSS
          Empty branches and empty regular expressions are not
          portable to V8.

          The restriction against applying `*' or `+' to a possibly-
          null operand is an artifact of the simplistic
          implementation.



     Page 3                                           (printed 9/2/87)






     RRRREEEEGGGGEEEEXXXXPPPP((((3333))))               UUUUNNNNIIIIXXXX 5555....0000 ((((llllooooccccaaaallll))))                RRRREEEEGGGGEEEEXXXXPPPP((((3333))))



          Does not support _e_g_r_e_p's newline-separated branches; neither
          does the V8 _r_e_g_e_x_p(3), though.

          Due to emphasis on compactness and simplicity, it's not
          strikingly fast.  It does give special attention to handling
          simple cases quickly.

















































     Page 4                                           (printed 9/2/87)



